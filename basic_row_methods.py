#!usr/bin/env python
#! -*- coding: utf-8 -*-

############################################
# Basic row methods for Python @by Xenoret #
############################################

import os

os.system('cls||clear')
met = ''' 
Рассмотрим основные методы строк, которые мы можем применить в приложениях:

0 - Вывод меню.
1 - True False работа по условию.
2 - Форматирование регистров.
3 - Удаление пробелов.
4 - Проверка длинны по отношению параметра width.
5 - Строки.
6 - Поиск в строке.
7 - Замена в строке.
8 - Разделение на подстроки.
9 - Соединение строк.
00 - Выход\n
'''#Меню выбора

one = '''True False работа по условию.

isalpha(): возвращает True, если строка состоит только из алфавитных символов

islower(): возвращает True, если строка состоит только из символов в нижнем регистре

isupper(): возвращает True, если все символы строки в верхнем регистре

isdigit(): возвращает True, если все символы строки - цифры

isnumeric(): возвращает True, если строка представляет собой число

    Например, если мы ожидаем ввод с клавиатуры числа, то перед преобразованием введенной строки в число можно проверить,
    с помощью метода isnumeric() введено ли в действительности число, и если так, то выполнить операцию преобразования:
    string = input("Введите число: ")
    if string.isnumeric():
        number = int(string)
        print(number)

startswith(str): возвращает True, если строка начинается с подстроки str

    Проверка, начинается или оканчивается строка на определенную подстроку:
        
    file_name = "hello.py"

    starts_with_hello = file_name.startswith("hello")   # True
    ends_with_exe = file_name.endswith("exe")           # False

endswith(str): возвращает True, если строка заканчивается на подстроку str\n '''

two = '''Форматирование регистров.

lower(): переводит строку в нижний регистр

upper(): переводит строку в вехний регистр

title(): начальные символы всех слов в строке переводятся в верхний регистр

capitalize(): переводит в верхний регистр первую букву только самого первого слова строки\n'''

three = '''Удаление пробелов.

lstrip(): удаляет начальные пробелы из строки

rstrip(): удаляет конечные пробелы из строки

strip(): удаляет начальные и конечные пробелы из строки

    Удаление пробелов в начале и в конце строки:

    string = "   hello  world!  "
    string = string.strip()
    print(string)           # hello  world!\n'''

four    =   '''Проверка длинны по отношению параметра width.

ljust(width): если длина строки меньше параметра width, то справа от строки добавляются пробелы, чтобы дополнить значение width, а сама строка выравнивается по левому краю

rjust(width): если длина строки меньше параметра width, то слева от строки добавляются пробелы, чтобы дополнить значение width, а сама строка выравнивается по правому краю

    Дополнение строки пробелами и выравнивание:

    print("iPhone 7:", "52000".rjust(10))
    print("Huawei P10:", "36000".rjust(10))

center(width): если длина строки меньше параметра width, то слева и справа от строки равномерно добавляются пробелы, чтобы дополнить значение width, 
а сама строка выравнивается по центру\n'''

five    =   '''Строки.

find(str[, start [, end]): возвращает индекс подстроки в строке. Если подстрока не найдена, возвращается число -1

replace(old, new[, num]): заменяет в строке одну подстроку на другую

split([delimeter[, num]]): разбивает строку на подстроки в зависимости от разделителя

join(strs): объединяет строки в одну строку, вставляя между ними определенный разделитель\n'''

six     =   '''Поиск в строке.

Для поиска подстроки в строке в Python применяется метод find(), который возвращает индекс первого вхождения подстроки в строку и имеет три формы:

find(str): поиск подстроки str ведется с начала строки до ее конца

find(str, start): параметр start задает начальный индекс, с которого будет производиться поиск

find(str, start, end): параметр end задает конечный индекс, до которого будет идти поиск

    Если подстрока не найдена, метод возвращает -1:
        
    welcome = "Hello world! Goodbye world!"
    index = welcome.find("wor")
    print(index)       # 6
     
    # поиск с 10-го индекса
    index = welcome.find("wor",10)
    print(index)       # 21
     
    # поиск с 10 по 15 индекс
    index = welcome.find("wor",10,15)
    print(index)       # -1\n'''

seven   =   '''Замена в строке.

Для замены в строке одной подстроки на другую применяется метод replace():

replace(old, new): заменяет подстроку old на new

replace(old, new, num): параметр num указывает, сколько вхождений подстроки old надо заменить на new

    phone = "+1-234-567-89-10"
     
    # замена дефисов на пробел
    edited_phone = phone.replace("-", " ")
    print(edited_phone)     # +1 234 567 89 10
     
    # удаление дефисов
    edited_phone = phone.replace("-", "")
    print(edited_phone)     # +12345678910
     
    # замена только первого дефиса
    edited_phone = phone.replace("-", "", 1)
    print(edited_phone)     # +1234-567-89-10\n'''

eight   =   '''Разделение на подстроки.

Метод split() разбивает строку на список подстрок в зависимости от разделителя. В качестве разделителя может выступать любой символ или последовательность символов. Данный метод имеет следующие формы:

split(): в качестве разделителя используется пробел

split(delimeter): в качестве разделителя используется delimeter

split(delimeter, num): параметр num указывает, сколько вхождений delimeter используется для разделения. Оставшаяся часть строки добавляется в список без разделения на подстроки

    text = "Это был огромный, в два обхвата дуб, с обломанными ветвями и с обломанной корой"
    # разделение по пробелам
    splitted_text = text.split()
    print(splitted_text)
    print(splitted_text[6])     # дуб,
     
    # разбиение по запятым
    splitted_text = text.split(",")
    print(splitted_text)
    print(splitted_text[1])     # в два обхвата дуб
     
    # разбиение по первым пяти пробелам
    splitted_text = text.split(" ", 5)
    print(splitted_text)        
    print(splitted_text[5])     # обхвата дуб, с обломанными ветвями и с обломанной корой\n'''

nine    =   '''Соединение строк.

При рассмотрении простейших операций со строками было показано, как объединять строки с помощью операции сложения. Другую возможность для соединения строк представляет метод join(): он объединяет список строк. Причем текущая строка, у которой вызывается данный метод, используется в качестве разделителя:

    words = ["Let", "me", "speak", "from", "my", "heart", "in", "English"]
     
    # разделитель - пробел
    sentence = " ".join(words)
    print(sentence)  # Let me speak from my heart in English
     
    # разделитель - вертикальная черта
    sentence = " | ".join(words)
    print(sentence)  # Let | me | speak | from | my | heart | in | English

Вместо списка в метод join можно передать простую строку, тогда разделитель будет вставляться между символами этой строки:

    word = "hello"
    joined_word = "|".join(word)
    print(joined_word)      # h|e|l|l|o'''

print(met) #Вывод на экран меню
while met:
    methoods = input('Введите номер интересуещего вас пункта: ')
    if methoods == '0':
        os.system('cls||clear')
        print(met)
    elif methoods == '1':
        os.system('cls||clear')
        print(one)
    elif methoods == '2':
        os.system('cls||clear')
        print(two)
    elif methoods == '3':
        os.system('cls||clear')
        print(three)
    elif methoods == '4':
        os.system('cls||clear')
        print(four)
    elif methoods == '5':
        os.system('cls||clear')
        print(five)
    elif methoods == '6':
        os.system('cls||clear')
        print(six)
    elif methoods == '7':
        os.system('cls||clear')
        print(seven)
    elif methoods == '8':
        os.system('cls||clear')
        print(eight)
    elif methoods == '9':
        os.system('cls||clear')
        print(nine)
    elif methoods == '00':
        os.system('cls||clear') #Стереть результат программы в терминале Windows и Linux
        exit()
    else:
        print('\n\n!!!ВНИМАНИЕ!!!   Вы ввели неизвестные мне символы, прошу повторите попытку!   !!!ВНИМАНИЕ!!!\n\n')